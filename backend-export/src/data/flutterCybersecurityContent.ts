// Flutter Mobile Development course content
export const flutterContent: { [key: string]: any } = {
  "flutter-introduction": {
    id: "flutter-introduction",
    title: "Introduction to Flutter",
    type: "text",
    duration: 20,
    content: [
      {
        id: "intro",
        type: "text",
        title: "Welcome to Flutter Development!",
        content: "Flutter is Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase. With Flutter, you can create stunning apps that work seamlessly across platforms."
      },
      {
        id: "what-is-flutter",
        type: "text",
        title: "What is Flutter?",
        content: "Flutter offers powerful advantages for mobile development:\n\n📱 **Cross-Platform**: One codebase for iOS, Android, web, and desktop\n⚡ **Fast Development**: Hot reload for instant updates\n🎨 **Beautiful UIs**: Rich set of widgets and animations\n🚀 **High Performance**: Compiled to native ARM code\n💼 **Industry Adoption**: Used by Google, Alibaba, BMW, and more\n🔧 **Rich Ecosystem**: Thousands of packages and plugins\n\n**Flutter vs Native Development:**\n• Faster development cycle\n• Consistent UI across platforms\n• Single team can build for multiple platforms\n• Shared business logic and state management"
      },
      {
        id: "basic-app",
        type: "code",
        title: "Your First Flutter App",
        language: "dart",
        content: "import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'My First Flutter App',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: HomePage(),\n    );\n  }\n}\n\nclass HomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Welcome to Flutter'),\n        backgroundColor: Colors.blue,\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Icon(\n              Icons.flutter_dash,\n              size: 100,\n              color: Colors.blue,\n            ),\n            SizedBox(height: 20),\n            Text(\n              'Hello, Flutter!',\n              style: TextStyle(\n                fontSize: 24,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n            SizedBox(height: 10),\n            Text(\n              'Your first cross-platform app',\n              style: TextStyle(\n                fontSize: 16,\n                color: Colors.grey[600],\n              ),\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          print('Button pressed!');\n        },\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}"
      },
      {
        id: "why-flutter",
        type: "text",
        title: "Why Choose Flutter?",
        content: "**Flutter Advantages:**\n\n🔥 **Hot Reload**: See changes instantly without losing app state\n🎯 **Single Codebase**: Write once, run everywhere\n💰 **Cost Effective**: Reduce development time and team size\n🎨 **Custom UI**: Create pixel-perfect designs\n📈 **Growing Ecosystem**: 20,000+ packages on pub.dev\n\n**Popular Apps Built with Flutter:**\n• Google Ads\n• Alibaba Xianyu\n• BMW ConnectedDrive\n• eBay Motors\n• Reflectly\n• Hamilton Musical\n\n**Career Opportunities:**\n• Flutter Developer\n• Mobile App Developer\n• Cross-Platform Developer\n• UI/UX Developer\n• Full-Stack Mobile Developer\n\nFlutter developers are in high demand with excellent salary prospects!"
      }
    ]
  },
  "widgets-and-layouts": {
    id: "widgets-and-layouts",
    title: "Widgets and Layouts",
    type: "text",
    duration: 30,
    content: [
      {
        id: "intro",
        type: "text",
        title: "Understanding Flutter Widgets",
        content: "In Flutter, everything is a widget. Widgets are the building blocks of Flutter apps - from layout structures like rows and columns to interactive elements like buttons and text fields."
      },
      {
        id: "basic-widgets",
        type: "code",
        title: "Essential Flutter Widgets",
        language: "dart",
        content: "import 'package:flutter/material.dart';\n\nclass WidgetShowcase extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Flutter Widgets'),\n      ),\n      body: SingleChildScrollView(\n        padding: EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Text Widgets\n            Text(\n              'Welcome to Flutter!',\n              style: TextStyle(\n                fontSize: 24,\n                fontWeight: FontWeight.bold,\n                color: Colors.blue,\n              ),\n            ),\n            SizedBox(height: 16),\n            \n            // Container with decoration\n            Container(\n              width: double.infinity,\n              padding: EdgeInsets.all(16),\n              decoration: BoxDecoration(\n                color: Colors.blue[50],\n                borderRadius: BorderRadius.circular(12),\n                border: Border.all(color: Colors.blue, width: 2),\n              ),\n              child: Text('This is a decorated container'),\n            ),\n            SizedBox(height: 16),\n            \n            // Row with icons\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: [\n                Icon(Icons.home, size: 40, color: Colors.green),\n                Icon(Icons.star, size: 40, color: Colors.orange),\n                Icon(Icons.favorite, size: 40, color: Colors.red),\n              ],\n            ),\n            SizedBox(height: 16),\n            \n            // Elevated Button\n            ElevatedButton(\n              onPressed: () {\n                print('Button pressed!');\n              },\n              style: ElevatedButton.styleFrom(\n                backgroundColor: Colors.purple,\n                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),\n              ),\n              child: Text('Tap Me'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"
      },
      {
        id: "layouts",
        type: "code",
        title: "Layout Widgets",
        language: "dart",
        content: "class LayoutExamples extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Layout Examples')),\n      body: Column(\n        children: [\n          // Header section\n          Container(\n            width: double.infinity,\n            color: Colors.blue,\n            padding: EdgeInsets.all(16),\n            child: Text(\n              'Header Section',\n              style: TextStyle(color: Colors.white, fontSize: 18),\n              textAlign: TextAlign.center,\n            ),\n          ),\n          \n          // Main content area\n          Expanded(\n            child: Row(\n              children: [\n                // Sidebar\n                Container(\n                  width: 100,\n                  color: Colors.grey[200],\n                  child: Column(\n                    children: [\n                      ListTile(\n                        icon: Icon(Icons.home),\n                        title: Text('Home'),\n                      ),\n                      ListTile(\n                        icon: Icon(Icons.person),\n                        title: Text('Profile'),\n                      ),\n                    ],\n                  ),\n                ),\n                \n                // Main content\n                Expanded(\n                  child: Container(\n                    padding: EdgeInsets.all(16),\n                    child: GridView.builder(\n                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                        crossAxisCount: 2,\n                        crossAxisSpacing: 10,\n                        mainAxisSpacing: 10,\n                      ),\n                      itemCount: 6,\n                      itemBuilder: (context, index) {\n                        return Card(\n                          elevation: 4,\n                          child: Center(\n                            child: Text(\n                              'Item ${index + 1}',\n                              style: TextStyle(fontSize: 16),\n                            ),\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n          \n          // Bottom navigation\n          Container(\n            height: 60,\n            color: Colors.grey[800],\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: [\n                IconButton(\n                  icon: Icon(Icons.home, color: Colors.white),\n                  onPressed: () {},\n                ),\n                IconButton(\n                  icon: Icon(Icons.search, color: Colors.white),\n                  onPressed: () {},\n                ),\n                IconButton(\n                  icon: Icon(Icons.person, color: Colors.white),\n                  onPressed: () {},\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}"
      },
      {
        id: "responsive-design",
        type: "text",
        title: "Responsive Design in Flutter",
        content: "**Building Responsive Flutter Apps:**\n\n📐 **Layout Widgets for Responsiveness:**\n• **Flexible & Expanded**: Control how children flex within Row/Column\n• **MediaQuery**: Get screen dimensions and orientation\n• **LayoutBuilder**: Build layouts based on parent constraints\n• **OrientationBuilder**: Adapt to portrait/landscape changes\n\n📱 **Screen Size Considerations:**\n```dart\n// Get screen size\nfinal screenSize = MediaQuery.of(context).size;\nfinal isTablet = screenSize.width > 600;\n\n// Responsive columns\nfinal crossAxisCount = isTablet ? 3 : 2;\n```\n\n🎯 **Best Practices:**\n• Use flexible layouts instead of fixed sizes\n• Test on various screen sizes and orientations\n• Consider different pixel densities\n• Use SafeArea for notched devices\n• Implement proper keyboard handling\n\n**Common Layout Patterns:**\n• **Master-Detail**: Sidebar on tablets, navigation on phones\n• **Grid Layouts**: Adjust column count based on screen size\n• **Responsive Navigation**: Bottom nav on phones, drawer on tablets\n• **Adaptive Spacing**: Adjust padding and margins for screen size"
      }
    ]
  }
};\n\n// Cybersecurity Fundamentals course content\nexport const cybersecurityContent: { [key: string]: any } = {\n  "cybersecurity-basics": {\n    id: "cybersecurity-basics",\n    title: "Cybersecurity Fundamentals",\n    type: "text",\n    duration: 25,\n    content: [\n      {\n        id: "intro",\n        type: "text",\n        title: "Welcome to Cybersecurity!",\n        content: "Cybersecurity is the practice of protecting systems, networks, and programs from digital attacks. As our world becomes increasingly digital, cybersecurity has become one of the most critical and fastest-growing fields in technology."\n      },\n      {\n        id: "what-is-cybersecurity",\n        type: "text",\n        title: "What is Cybersecurity?",\n        content: "Cybersecurity encompasses multiple domains:\\n\\n🛡️ **Network Security**: Protecting network infrastructure\\n🔐 **Information Security**: Safeguarding data confidentiality and integrity\\n💻 **Application Security**: Securing software and applications\\n🏢 **Operational Security**: Managing data handling processes\\n🆔 **Identity Management**: Controlling user access and permissions\\n📱 **Endpoint Security**: Protecting individual devices\\n☁️ **Cloud Security**: Securing cloud-based assets\\n\\n**The CIA Triad:**\\n• **Confidentiality**: Information accessible only to authorized users\\n• **Integrity**: Information remains accurate and unaltered\\n• **Availability**: Information and systems accessible when needed"\n      },\n      {\n        id: "common-threats",\n        type: "text",\n        title: "Common Cyber Threats",\n        content: "**Major Cybersecurity Threats:**\\n\\n🦠 **Malware**: Viruses, ransomware, trojans, spyware\\n🎣 **Phishing**: Fraudulent emails and websites to steal credentials\\n💥 **DDoS Attacks**: Overwhelming systems with traffic\\n🔓 **Data Breaches**: Unauthorized access to sensitive information\\n👤 **Social Engineering**: Manipulating people to reveal information\\n🏠 **Insider Threats**: Risks from within the organization\\n🔑 **Password Attacks**: Brute force, dictionary, credential stuffing\\n\\n**Real-World Examples:**\\n• Equifax breach (2017): 147 million records\\n• WannaCry ransomware (2017): 300,000+ computers\\n• Target breach (2013): 40 million credit cards\\n• SolarWinds hack (2020): 18,000+ organizations\\n\\n**Impact Statistics:**\\n• Average data breach cost: $4.45 million\\n• Ransomware attack every 11 seconds\\n• 95% of breaches due to human error"\n      },\n      {\n        id: "protection-basics",\n        type: "code",\n        title: "Basic Security Practices",\n        language: "bash",\n        content: "# Password Security Best Practices\\n\\n# Generate strong passwords (example using Python)\\npython3 -c \\\"\\nimport secrets\\nimport string\\n\\n# Generate 16-character password\\ncharacters = string.ascii_letters + string.digits + '!@#$%^&*'\\npassword = ''.join(secrets.choice(characters) for _ in range(16))\\nprint(f'Strong password: {password}')\\n\\\"\\n\\n# Check for system updates (Linux)\\nsudo apt update && sudo apt upgrade\\n\\n# Enable firewall\\nsudo ufw enable\\nsudo ufw status\\n\\n# Check running services\\nsudo netstat -tulpn\\n\\n# Monitor failed login attempts\\nsudo grep \\\"Failed password\\\" /var/log/auth.log | tail -10\\n\\n# File permissions (limit access)\\nchmod 600 sensitive_file.txt  # Owner read/write only\\nchmod 644 public_file.txt     # Owner write, others read\\n\\n# Encrypt sensitive files\\ngpg --symmetric --cipher-algo AES256 confidential.txt\\n\\n# Secure file deletion\\nshred -vfz -n 3 sensitive_file.txt\\n\\n# Network security scan (using nmap)\\nnmap -sS -O target_ip  # SYN scan with OS detection"\n      }\n    ]\n  },\n  "threat-analysis": {\n    id: "threat-analysis",\n    title: "Threat Analysis and Risk Assessment",\n    type: "text",\n    duration: 30,\n    content: [\n      {\n        id: "intro",\n        type: "text",\n        title: "Understanding Threat Analysis",\n        content: "Threat analysis is the process of identifying, evaluating, and prioritizing potential security threats to an organization. It's a critical component of a comprehensive cybersecurity strategy."\n      },\n      {\n        id: "risk-framework",\n        type: "text",\n        title: "Risk Assessment Framework",\n        content: "**Risk Assessment Process:**\\n\\n🎯 **Asset Identification**\\n• Identify valuable assets (data, systems, people)\\n• Classify assets by importance and sensitivity\\n• Document asset dependencies and relationships\\n\\n⚠️ **Threat Identification**\\n• External threats (hackers, nation-states)\\n• Internal threats (employees, contractors)\\n• Environmental threats (natural disasters)\\n• Technical threats (system failures, bugs)\\n\\n🔍 **Vulnerability Assessment**\\n• Technical vulnerabilities (unpatched software)\\n• Process vulnerabilities (weak procedures)\\n• Human vulnerabilities (lack of training)\\n• Physical vulnerabilities (unsecured facilities)\\n\\n📊 **Risk Calculation**\\n```\\nRisk = Threat Likelihood × Vulnerability × Impact\\n```\\n\\n🛡️ **Risk Mitigation Strategies**\\n• **Accept**: Live with low-impact risks\\n• **Avoid**: Eliminate the risk source\\n• **Mitigate**: Reduce likelihood or impact\\n• **Transfer**: Insurance or outsourcing"\n      },\n      {\n        id: "threat-modeling",\n        type: "code",\n        title: "Threat Modeling Example",\n        language: "python",\n        content: "# Simple threat analysis script\\nimport json\\nfrom datetime import datetime\\n\\nclass ThreatAnalysis:\\n    def __init__(self):\\n        self.threats = []\\n        self.assets = []\\n        self.vulnerabilities = []\\n    \\n    def add_asset(self, name, value, sensitivity):\\n        asset = {\\n            'name': name,\\n            'value': value,  # 1-10 scale\\n            'sensitivity': sensitivity,  # low, medium, high\\n            'id': len(self.assets) + 1\\n        }\\n        self.assets.append(asset)\\n        return asset['id']\\n    \\n    def add_threat(self, name, likelihood, impact, target_asset_id):\\n        threat = {\\n            'name': name,\\n            'likelihood': likelihood,  # 1-10 scale\\n            'impact': impact,  # 1-10 scale\\n            'target_asset': target_asset_id,\\n            'risk_score': likelihood * impact,\\n            'timestamp': datetime.now().isoformat()\\n        }\\n        self.threats.append(threat)\\n        return threat\\n    \\n    def calculate_risk_matrix(self):\\n        risk_levels = []\\n        for threat in self.threats:\\n            score = threat['risk_score']\\n            if score <= 25:\\n                level = 'Low'\\n            elif score <= 50:\\n                level = 'Medium'\\n            elif score <= 75:\\n                level = 'High'\\n            else:\\n                level = 'Critical'\\n            \\n            risk_levels.append({\\n                'threat': threat['name'],\\n                'score': score,\\n                'level': level\\n            })\\n        \\n        return sorted(risk_levels, key=lambda x: x['score'], reverse=True)\\n    \\n    def generate_report(self):\\n        report = {\\n            'timestamp': datetime.now().isoformat(),\\n            'total_assets': len(self.assets),\\n            'total_threats': len(self.threats),\\n            'risk_matrix': self.calculate_risk_matrix()\\n        }\\n        return json.dumps(report, indent=2)\\n\\n# Example usage\\nanalysis = ThreatAnalysis()\\n\\n# Add assets\\ndb_id = analysis.add_asset('Customer Database', 9, 'high')\\nweb_id = analysis.add_asset('Web Application', 7, 'medium')\\n\\n# Add threats\\nanalysis.add_threat('SQL Injection', 6, 8, db_id)\\nanalysis.add_threat('DDoS Attack', 4, 6, web_id)\\nanalysis.add_threat('Insider Threat', 3, 9, db_id)\\n\\n# Generate report\\nprint(analysis.generate_report())"\n      }\n    ]\n  }\n};\n\n// Export functions\nexport const getFlutterContent = () => flutterContent;\nexport const getCybersecurityContent = () => cybersecurityContent;